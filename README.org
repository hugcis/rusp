* Rusp: a lisp written in Rust

This is a side-project. I wrote a minimal Lisp in Rust. It still need a number
of new features to be remotely close to a working programming language.

Parsing is done with the [[https://github.com/Geal/nom][nom]] parser framework.

** REPL
The program comes with a REPL:
#+begin_src
$ ./rusp
RSLisp Version 0.0.1
Press Ctrl+c to Exit
rlisp> (+ 3 3)
6
rlisp>
#+end_src

** Implemented

*** Operations

- ☑️ Addition
#+begin_src sh :dir ./target/debug :exports both
./rslisp -e "(+ 3 1)"
#+end_src

#+RESULTS:
: 4

- ☑ Substraction
#+begin_src sh :dir ./target/debug :exports both
./rslisp -e "(- 3 1)"
#+end_src

#+RESULTS:
: 2

- ☑ Multiplication
#+begin_src sh :dir ./target/debug :exports both
./rslisp -e "(* 3 12)"
#+end_src

#+RESULTS:
: 36

- ☑ Division
#+begin_src sh :dir ./target/debug :exports both
./rslisp -e "(/ 3. 12)"
#+end_src

#+RESULTS:
: 0.25

*** Built-ins

- ☑ Define function
#+begin_src sh :dir ./target/debug :exports both
./rslisp -e "(defun square (x) (* x x))"
#+end_src

#+RESULTS:
: square

- ☑ Eval function
#+begin_src sh :dir ./target/debug :exports both
  ./rslisp -e "(defun square (x) (* x x))
           (square 5)"
#+end_src

#+RESULTS:
: square

- ☑ Quoted expressions
#+begin_src sh :dir ./target/debug :exports both
  ./rslisp -e "(car '(1 2 3))"
#+end_src

#+RESULTS:
: 1

**** Functions

- ☑ Nth element of a list
#+begin_src sh :dir ./target/debug :exports both
  ./rslisp -e "(nth 2 '((car '(4 5 6)) 2 3))"
#+end_src

#+RESULTS:
: 3

- ☑ car: first element of a list
#+begin_src sh :dir ./target/debug :exports both
  ./rslisp -e "(car '((car '(4 5 6)) 2 3))"
#+end_src

#+RESULTS:
: (car '(4 5 6))

-  ❌ range
-  ❌ map
